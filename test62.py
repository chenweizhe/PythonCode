#!/usr/bin/env python3 
# -*- coding:utf-8 -*- 
'''
 * @Author: PythonZhe 
 * @Date: 2018-03-16 16:21:58 
 * @Last Modified by:   PythonZhe 
 * @Last Modified time: 2018-03-16 16:21:58 
 * @Desc:正则表达式 
'''
# Python提供了re模块 包含所有正则表达式的功能 由于Python的字符串本身也用\转义 所以要注意
# 例如:s = 'ABC\\-001' # Python的字符串 对应的正则表达式字符串变成： 'ABC\-001'
# 因此我们强烈建议用r做前缀 就不用考虑转义的问题
s = r'ABC\-001' # Python的字符串
# 对应的正则表达式字符串不变：
# 'ABC\-001'
# 判断正则表达式是否匹配 
import re
print(re.match(r'^\d{3}\-\d{3,8}$', '010-12345'))
print(re.match(r'^\d{3}\-\d{3,8}$', '010 12345'))
'''match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。常见的判断方法就是'''
'''切分字符串
用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：

# >>> 'a b   c'.split(' ')
['a', 'b', '', '', 'c']
嗯，无法识别连续的空格，用正则表达式试试：

# >>> re.split(r'\s+', 'a b   c')
['a', 'b', 'c']
无论多少个空格都可以正常分割。加入,试试：

# >>> re.split(r'[\s\,]+', 'a,b, c  d')
['a', 'b', 'c', 'd']
再加入;试试：

# >>> re.split(r'[\s\,\;]+', 'a,b;; c  d')
['a', 'b', 'c', 'd']
如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。'''
'''贪婪匹配
最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：

# >>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')
由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。

必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：

# >>> re.match(r'^(\d+?)(0*)$', '102'''

'''编译
当我们在Python中使用正则表达式时，re模块内部会干两件事情：

编译正则表达式，如果正则表达式的字符串本身不合法，会报错；

用编译后的正则表达式去匹配字符串。

如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：'''
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$') #预编译
re_telephone.match('010-12345').groups() #使用
re_telephone.match('010-8086').groups() #重复使用



